name: Zappy

on:
  push:
  pull_request:

env:
  MIRROR_URL: "git@github.com:EpitechPromo2027/B-YEP-400-LIL-4-1-zappy-josephine.chicouras.git"
  EXECUTABLES: "zappy_gui"
  CXX_EXECUTABLES: "zappy_gui"
  GLIBCHECKER_IGNORE: "./gui/connection/Socket.cpp ./gui/connection/Sleep.cpp"
  MAX_REPO_SIZE: "15"

jobs:
  build:
    name: Test CMake and verify executables
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify executables
        run: |
          for executable in ${EXECUTABLES//,/ }; do
            make "$executable"
            if [ ! -x "$executable" ]; then
              echo "::error file=$executable,title=Executable problem::This executable does not exist or is not executable"
              exit 1
            fi
          done

  glibchecker:
    name: Check for un-encapsulated GLibC usage in C++ executables
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Build executables
        timeout-minutes: 2
        run: make

      - name: Check for un-encapsulated GLibC usage
        timeout-minutes: 2
        run: |
          export PATH=$PATH:$(pwd)/.github/workflows
          for executable in ${CXX_EXECUTABLES//,/ }; do
            GLIBCHECKER_GH_ACTIONS= glib_checker $executable
          done

  tests:
    name: Run tests
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run tests
        timeout-minutes: 2
        run: make tests_run

  check_coding_style:
    name: Check coding style
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check the coding style with `coding-style`
        run: check.sh $(pwd) $(pwd)

      - name: Coding style report
        run: |
          while read line; do
            file=$(echo $line | cut -d":" -f1)
            line_number=$(echo $line | cut -d":" -f2)
            level=$(echo $(echo $line | cut -d":" -f3 | cut -d" " -f2) coding style error)
            code=$(echo $line | cut -d":" -f4-)
            echo "::error file=$file,line=$line_number,title=$level::$code"
          done < "coding-style-reports.log"

      - name: Exit with error if there is coding style error(s)
        run: |
          if test -s coding-style-reports.log; then
              exit 1
          fi

  push_to_mirror:
    name: Push to mirror
    needs:
      - build
      - glibchecker
      - tests
      - check_coding_style
    if: ${{ github.ref_name == 'main' && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check repository size
        run: |
          if [[ $(du -sm --exclude=".git" | cut -f1) -gt $MAX_REPO_SIZE ]]; then
            echo "::error title=Size is greater than ${MAX_REPO_SIZE}MB::Repository size is $(du -skh --exclude=".git" | cut -f1)B"
            exit 1
          else
            echo "::notice::Repository size is $(du -skh --exclude=".git" | cut -f1)B"
          fi

      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
